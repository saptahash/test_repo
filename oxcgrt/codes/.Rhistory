########### using additional data to qualify gaps in testing data
testing_data2_url <- "https://drive.google.com/uc?id=13yev97Ua-E-EslhDIX9vQiC2OZIqgGX4&export=download"
testing.data2 <- read.csv(url(testing_data2_url), stringsAsFactors = FALSE)
testing.data2 <- testing.data2 %>% mutate(test_nodata = ifelse(observations_found == 0, 1, NA))
no.testing.data <- testing.data2 %>% filter(test_nodata == 1)
no.testing.data.ccode <- countrycode(no.testing.data$country, origin = "country.name", destination = "iso3c")
no.testing.data <- no.testing.data %>% mutate(countrycode = no.testing.data.ccode)
#note Micronesia isn't matched
oxcgrtdata <- left_join(oxcgrtdata, no.testing.data %>% select(countrycode, test_nodata), by = c("CountryCode" = "countrycode"))
write.csv(oxcgrtdata, file = paste("../data/output/OxCGRT_", data_date, ".csv", sep = ""))
# import packages
library(dplyr)
library(tidyr)
library(RcppRoll)
# define global macros
data_date <- lubridate::today()
# read in base csv file
oxcgrtdata <- read.csv(file = paste("../data/output/OxCGRT_", data_date, ".csv", sep = ""), stringsAsFactors = FALSE)
# Filling in gaps in indicators
## Code Optimisation Notes - can use lapply here
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(H3_Contact.tracing_1 = H3_Contact.tracing,
H2_Testing.policy_1 = H2_Testing.policy,
C8_International_1 = C8_International.travel.controls,
H1_Public.info_1 = H1_Public.information.campaigns) %>%
fill(H3_Contact.tracing_1, H2_Testing.policy_1, C8_International_1, H1_Public.info_1)
### Define cases_controlled metric
## Compute 7-day rolling avg of cases
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(moveave_confirmedcases = zoo::rollmean(ConfirmedCases, k = 7, fill = NA, align = 'right')) %>%
mutate(lag_moveave_cases = lag(moveave_confirmedcases, order_by = Date),
newcases = ifelse(moveave_confirmedcases - lag_moveave_cases > 0, moveave_confirmedcases - lag_moveave_cases, 0),
cases_controlled = ifelse((50-newcases)/50 > 0, (50-newcases)/50, 0))
##FROM TOBY: I can't quite tell if you have handled this elsewhere, but you may need to account for cases that will end up >1. This can occur in uncommon instance where countries revise down their count, giving "negative" newcases.
View(oxcgrtdata)
View(oxcgrtdata %>% filter(CountryCode = "GBR"))
View(oxcgrtdata %>% filter(CountryCode == "GBR"))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>% fill(test_percase)
# CODE BUG ALERT - Inf handling in test_percase, min_tests and max_tests
oxcgrtdata <- oxcgrtdata %>% arrange(Date, CountryCode) %>% group_by(Date) %>%
mutate(min_tests = min(test_percase, na.rm = T),
max_tests = max(test_percase, na.rm = T)) %>%
mutate(test_score = (log(test_percase) - log(min_tests))/(log(max_tests) - log(min_tests)))
oxcgrtdata <- oxcgrtdata %>% group_by(Date) %>% mutate(global_mean_test_score = mean(test_score, na.rm = T)) %>%
mutate(test_score = ifelse(is.na(test_score) == T, global_mean_test_score, test_score)) %>%
ungroup() %>%
mutate(test_score = ifelse(is.na(test_nodata) == T , test_score, 0))
oxcgrtdata <- oxcgrtdata %>% mutate(test_and_trace = 0.25*H3_Contact.tracing_1/3 + 0.25*H2_Testing.policy_1/2 + 0.5*test_score)
### define imported cases indicator
oxcgrtdata <- oxcgrtdata %>% mutate(manage_imported_cases = C8_International_1/4)
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right", fill = NA),
min_apple = roll_min(apple_ave, n = 28L, align = "right", fill = NA))
View(oxcgrtdata %>% filter(CountryCode == "GBR"))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right"),
min_apple = roll_min(apple_ave, n = 28L, align = "right"))
?roll_min
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right",na.rm = T),
min_apple = roll_min(apple_ave, n = 28L, align = "right", na.rm = T))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right",na.rm = F),
min_apple = roll_min(apple_ave, n = 28L, align = "right", na.rm = F))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right",fill = numeric(0)),
min_apple = roll_min(apple_ave, n = 28L, align = "right", fill = numeric(0)))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right",fill = NA),
min_apple = roll_min(apple_ave, n = 28L, align = "right", fill = NA))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right",fill = NA, na.rm = T),
min_apple = roll_min(apple_ave, n = 28L, align = "right", fill = NA, na.rm = T))
View(oxcgrtdata %>% filter(CountryCode == "GBR"))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right",fill = NA, na.rm = F),
min_apple = roll_min(apple_ave, n = 28L, align = "right", fill = NA, na.rm = F))
View(oxcgrtdata %>% filter(CountryCode == "GBR"))
##FROM TOBY: this is also worth noting of the min/max range for tests above.
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right",fill = NA, na.rm = T),
min_apple = roll_min(apple_ave, n = 28L, align = "right", fill = NA, na.rm = T))
View(oxcgrtdata %>% filter(CountryCode == "GBR"))
View(oxcgrtdata %>% filter(CountryCode == "GBR") %>% select(apple_ave, google_ave, min_apple, min_google))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right",fill = numeric(0), na.rm = T),
min_apple = roll_min(apple_ave, n = 28L, align = "right", fill = numeric(0), na.rm = T))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right",fill = 0, na.rm = T),
min_apple = roll_min(apple_ave, n = 28L, align = "right", fill = 0, na.rm = T))
View(oxcgrtdata %>% filter(CountryCode == "GBR") %>% select(apple_ave, google_ave, min_apple, min_google))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right",fill = NA, na.rm = T),
min_apple = roll_min(apple_ave, n = 28L, align = "right", fill = NA, na.rm = T))
##FROM TOBY: this is also worth noting of the min/max range for tests above.
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right",fill = NA, na.rm = T),
min_apple = roll_min(apple_ave, n = 28L, align = "right", fill = NA, na.rm = T),
min_google = ifelse(is.infinite(min_google), NA, min_google))
View(oxcgrtdata %>% filter(CountryCode == "GBR") %>% select(apple_ave, google_ave, min_apple, min_google))
oxcgrtdata <- read.csv(file = paste("../data/output/OxCGRT_", data_date, ".csv", sep = ""), stringsAsFactors = FALSE)
# Filling in gaps in indicators
## Code Optimisation Notes - can use lapply here
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(H3_Contact.tracing_1 = H3_Contact.tracing,
H2_Testing.policy_1 = H2_Testing.policy,
C8_International_1 = C8_International.travel.controls,
H1_Public.info_1 = H1_Public.information.campaigns) %>%
fill(H3_Contact.tracing_1, H2_Testing.policy_1, C8_International_1, H1_Public.info_1)
### Define cases_controlled metric
## Compute 7-day rolling avg of cases
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(moveave_confirmedcases = zoo::rollmean(ConfirmedCases, k = 7, fill = NA, align = 'right')) %>%
mutate(lag_moveave_cases = lag(moveave_confirmedcases, order_by = Date),
newcases = ifelse(moveave_confirmedcases - lag_moveave_cases > 0, moveave_confirmedcases - lag_moveave_cases, 0),
cases_controlled = ifelse((50-newcases)/50 > 0, (50-newcases)/50, 0))
##FROM TOBY: I can't quite tell if you have handled this elsewhere, but you may need to account for cases that will end up >1. This can occur in uncommon instance where countries revise down their count, giving "negative" newcases.
#' FROM SAPTA: proposed fix -> Since -ve newcases can occur at multiple points along the time series, I could think of only 1 option here -
#' => set newcases = 0 wherever newcases<0 => we assume a flat moveave_cases wherever the curve drops
### define test and trace indicators
#' define test numbers for each country by date
#' -> by(date): if missing test_data, test_data = latest test data
#' define max_tests -> max(test_data) by Date
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>% fill(test_percase)
# CODE BUG ALERT - Inf handling in test_percase, min_tests and max_tests
oxcgrtdata <- oxcgrtdata %>% arrange(Date, CountryCode) %>% group_by(Date) %>%
mutate(min_tests = min(test_percase, na.rm = T),
max_tests = max(test_percase, na.rm = T)) %>%
mutate(test_score = (log(test_percase) - log(min_tests))/(log(max_tests) - log(min_tests)))
oxcgrtdata <- oxcgrtdata %>% group_by(Date) %>% mutate(global_mean_test_score = mean(test_score, na.rm = T)) %>%
mutate(test_score = ifelse(is.na(test_score) == T, global_mean_test_score, test_score)) %>%
ungroup() %>%
mutate(test_score = ifelse(is.na(test_nodata) == T , test_score, 0))
oxcgrtdata <- oxcgrtdata %>% mutate(test_and_trace = 0.25*H3_Contact.tracing_1/3 + 0.25*H2_Testing.policy_1/2 + 0.5*test_score)
### define imported cases indicator
oxcgrtdata <- oxcgrtdata %>% mutate(manage_imported_cases = C8_International_1/4)
### Behaviour change and community engagement
# ISSUE(FIXED) - no apple_ave or google_ave variable from previous code
# Code correction notes - creating them now for completion - to be removed later
#oxcgrtdata <- oxcgrtdata %>% ungroup() %>%
#  mutate(apple_ave = rowMeans(oxcgrtdata[,c("week_apple_transit", "week_apple_driving", "week_apple_walking")]),
#         google_ave = rowMeans(oxcgrtdata[,c("week_goog_retail", "week_goog_transitstations", "week_goog_workplaces")]))
#' CODE CORRECTION NOTE (FIXED) - Taking min at each date for time series purposes. Stata Code takes
#' global(within country until date) min of google_ave and apple_ave, before taking
#'  min between these
##FROM TOBY: this is also worth noting of the min/max range for tests above.
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>% group_by(CountryCode) %>%
mutate(min_google = roll_min(google_ave, n = 28L, align = "right",fill = NA, na.rm = T),
min_apple = roll_min(apple_ave, n = 28L, align = "right", fill = NA, na.rm = T),
min_google = ifelse(is.infinite(min_google), NA, min_google))
oxcgrtdata <- oxcgrtdata %>% mutate(mob = pmin(google_ave, apple_ave, na.rm = T),
mob = case_when(mob < 20 ~ 20,
mob > 20 & mob < 120 ~ mob,
mob > 120 & (is.na(mob) == F) ~ 120))
oxcgrtdata <- oxcgrtdata %>% mutate(community_understanding = 0.5*cases_controlled + (1-0.5*cases_controlled)*(120-mob)/100) %>%
mutate(community_understanding = ifelse(H1_Public.info_1!=2, 0, community_understanding))
### Final rollback checklist score = mean(4 criterion) ; check NA handling
oxcgrtdata$rollback_score <- rowMeans(oxcgrtdata[c("community_understanding", "test_and_trace",
"manage_imported_cases", "cases_controlled")], na.rm = T)
write.csv(oxcgrtdata, file = paste("../data/output/OxCGRT_", data_date, ".csv", sep = ""))
#####################
## New openness risk calculations
#' 1. Change in manage_imported_cases indicator
#' 2. Change in cases_controlled
#' 3. Invert score since this is openness risk, not rollback readiness
#####################
# Updating definition of manage_imported_cases
oxcgrtdata <- oxcgrtdata %>% mutate(manage_imported_cases = case_when(C8_International_1 == 0 ~ 0,
C8_International_1 == 1 ~ 0.25,
C8_International_1 == 2 ~ 0.5,
C8_International_1 > 2 ~ 1))
# Updating definition of cases_controlled - adding new cases_controlled_100k to record this
oxcgrtdata <- oxcgrtdata %>%
mutate(cases_per100k = newcases/(popWB/100000),
cases_controlled_per100k = case_when(cases_per100k >= 25 ~ 0,
cases_per100k < 25 ~ ((25-cases_per100k)/25)))
##------------------OLD INDEX--------------------
# Updating old score to reflect the change in manage_imported cases
oxcgrtdata$rollback_score <- rowMeans(oxcgrtdata[c("community_understanding", "test_and_trace",
"manage_imported_cases", "cases_controlled")], na.rm = T)
oxcgrtdata <- oxcgrtdata %>% mutate(openness_risk = 1 - rollback_score)
##------------------ NEW INDEX---------------------
# Calculating new rollback readiness score
oxcgrtdata$recoded_rollback <- rowMeans(oxcgrtdata[c("community_understanding", "test_and_trace",
"manage_imported_cases", "cases_controlled_per100k")], na.rm = T)
# Invert score to reflect openess risk
oxcgrtdata <- oxcgrtdata %>% mutate(openness_risk_new = 1 - recoded_rollback)
write.csv(oxcgrtdata, file = paste("../data/output/OxCGRT_", data_date, ".csv", sep = ""))
library("ggplot2")
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library(ggrepel)
library(gganimate)
library(plotly)
library(ggpubr)
source("rollbackviz_fun.r")
# ## Visualise general spread of rollback scores - what does the distribution look like over time?
#
# ## Comments - Fix labels + collect all in one panel
# date_seq <- seq.Date(from = lubridate::ymd('2020-04-01'), to = max(lineplot_oxcgrt$Date), by = 7)
#
#
# P <- list()
# for(date in date_seq){
#   p <- rollback.hist(lineplot_oxcgrt, zoo::as.Date(date))
#   P <- c(p, list(P))
#   ggsave(paste("./graphs/rollback_hist", zoo::as.Date(date), ".png", sep = ""), plot = p)
# }
#
# ### missing feat - need to save all these in a single page
#
# ## Two way line plot of Stringency/Government Response Index v/s rollback_scores
# countrylist <- c("CHN", "KOR", "FRA", "ITA", "GBR", "USA", "ESP")
#
# twoaxis.line(lineplot_oxcgrt, "USA")
#
# for(country in countrylist){
#   p <- twoaxis.line(lineplot_oxcgrt, country)
#   #ggsave
# }
lineplot_rollback <- oxcgrtdata %>%
select(CountryCode, region, openness_risk, StringencyIndex, CountryName, Date) %>%
mutate(openness_risk = ifelse(openness_risk < 0, 0, openness_risk),
Date = lubridate::ymd(Date))
country_lineplot <- c("CHN", "KOR", "FRA", "ITA", "GBR", "USA", "NZL", "IND", "GER", "RUS",
"SWE", "AUS", "ZFA", "BRA")
ggplot(lineplot_rollback %>% filter(CountryCode %in% country_lineplot), aes(x = Date, group = 1)) +
geom_line(aes(y = openness_risk)) +
geom_line(aes(y = StringencyIndex/100), colour = "red") +
scale_y_continuous(
name = "Openness Risk",
sec.axis = sec_axis(~.*100, name = "Stringency Index")) +
scale_x_date(breaks = seq.Date(lubridate::ymd(min(lineplot_rollback$Date)), lubridate::ymd(max(lineplot_rollback$Date)),21)) +
theme(axis.text.x = element_text(size = 6.5, angle = 20),
axis.text.y.right = element_text(colour = "red"),
axis.title.y.right = element_text(colour = "red")) +
facet_wrap(~ CountryName)
View(oxcgrtdata %>% filter(CountryCode == "RUS") %>% select(openness_risk))
View(oxcgrtdata %>% filter(CountryCode == "RUS") %>% select(openness_risk, Date))
oxcgrtdata$rollback_score <- rowMeans(oxcgrtdata[c("community_understanding", "test_and_trace",
"manage_imported_cases", "cases_controlled")], na.rm = T)
oxcgrtdata <- oxcgrtdata %>% mutate(openness_risk = 1 - rollback_score)
lineplot_rollback <- oxcgrtdata %>%
select(CountryCode, region, openness_risk, StringencyIndex, CountryName, Date) %>%
mutate(openness_risk = ifelse(openness_risk < 0, 0, openness_risk),
Date = lubridate::ymd(Date))
country_lineplot <- c("CHN", "KOR", "FRA", "ITA", "GBR", "USA", "NZL", "IND", "GER", "RUS",
"SWE", "AUS", "ZFA", "BRA")
ggplot(lineplot_rollback %>% filter(CountryCode %in% country_lineplot), aes(x = Date, group = 1)) +
geom_line(aes(y = openness_risk)) +
geom_line(aes(y = StringencyIndex/100), colour = "red") +
scale_y_continuous(
name = "Openness Risk",
sec.axis = sec_axis(~.*100, name = "Stringency Index")) +
scale_x_date(breaks = seq.Date(lubridate::ymd(min(lineplot_rollback$Date)), lubridate::ymd(max(lineplot_rollback$Date)),21)) +
theme(axis.text.x = element_text(size = 6.5, angle = 20),
axis.text.y.right = element_text(colour = "red"),
axis.title.y.right = element_text(colour = "red")) +
facet_wrap(~ CountryName)
##################################################################
#### Oxford Coronavirus Response Tracker (OxCGRT) @ BSG #################
##################################################################
### Import and process data exported from OxCGRT database
library(readr)
library(haven)
library(tidyverse)
library(lubridate)
library(countrycode)
library(zoo)
#pwd <<- "C:\Users\sapta\OneDrive\Desktop\oxcgrtRA\BSGtracker_analysis\codes"
data_date <<- today()
url_oxcgrt <<- "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest_withnotes.csv"
#setwd(pwd)
oxcgrtdata <- read_csv(url(url_oxcgrt))
#notes - save backup at this point
#Step 2: Bringing in crossnational correlates
correlates <- c("popWB",  "hosp_beds_WB", "total_sars", "sars_deaths",
"total_mers", "h1n1_death_estimate_25pctile",
"h1n1_death_estimate_75pctile", "pop_in_cities")
crossnationaldata <- read_dta("../data/input/crossnationaldata.dta") #note - new version stata file
correlatesdata <- crossnationaldata %>% select(countrycode, popWB, hosp_beds_WB,
total_sars, sars_deaths, total_mers,
h1n1_death_estimate_25pctile,
h1n1_death_estimate_75pctile, pop_in_cities)
oxcgrtdata <- left_join(oxcgrtdata, correlatesdata, by = c("CountryCode" = "countrycode"))
oxcgrtdata <- oxcgrtdata %>%
drop_na(Date) %>%
mutate(h1n1_midIGR = (h1n1_death_estimate_25pctile + h1n1_death_estimate_75pctile)/2)
#drop notes and M1
oxcgrtdata <- oxcgrtdata %>% select(-starts_with("M1"),-ends_with("Notes"))
#change date variable to date format
oxcgrtdata <- oxcgrtdata %>% mutate(Date = ymd(Date)) %>% subset(Date < data_date)
# attach region labels
East_Asia_Pacific <<- c("ASM", "AUS", "BRN", "CHN", "FJI", "FSM", "GUM", "HKG", "IDN", "JPN", "KHM", "KIR", "KOR", "LAO", "MAC", "MHL", "MMR", "MNG", "MNP", "MYS", "NCL", "NRU", "NZL", "PHL", "PLW", "PNG", "PRK", "PYF", "SGP", "SLB", "THA", "TLS", "TON", "TUV", "TWN", "VNM", "VUT", "WSM")
Europe_Central_Asia <<- c("ALB", "AND", "ARM", "AUT", "AZE", "BEL", "BGR", "BIH", "BLR", "CHE", "CHI", "CYP", "CZE", "DEU", "DNK", "ESP", "EST", "FIN", "FRA", "FRO", "GBR", "GEO", "GIB", "GRC", "GRL", "HRV", "HUN", "IMN", "IRL", "ISL", "ITA", "KAZ", "KGZ", "LIE", "LTU", "LUX", "LVA", "MCO", "MDA", "MKD", "MNE", "NLD", "NOR", "POL", "PRT", "ROU", "RUS", "SMR", "SRB", "SVK", "SVN", "SWE", "TJK", "TKM", "TUR", "UKR", "UZB", "RKS")
Latin_America_Caribbean <<- c("ABW", "ARG", "ATG", "BHS", "BLZ", "BOL", "BRA", "BRB", "CHL", "COL", "CRI", "CUB", "CUW", "CYM", "DMA", "DOM", "ECU", "GRD", "GTM", "GUY", "HND", "HTI", "JAM", "KNA", "LCA", "MAF", "MEX", "NIC", "PAN", "PER", "PRI", "PRY", "SLV", "SUR", "SXM", "TCA", "TTO", "URY", "VCT", "VEN", "VGB", "VIR")
Middle_East_North_Africa <<- c("ARE", "BHR", "DJI", "DZA", "EGY", "IRN", "IRQ", "ISR", "JOR", "KWT", "LBN", "LBY", "MAR", "MLT", "OMN", "PSE", "QAT", "SAU", "SYR", "TUN", "YEM")
North_America <<- c("BMU", "CAN", "USA")
South_Asia <<- c("AFG", "BGD", "BTN", "IND", "LKA", "MDV", "NPL", "PAK")
sub_Saharan_Africa <<- c("AGO", "BDI", "BEN", "BFA", "BWA", "CAF", "CIV", "CMR", "COD", "COG", "COM", "CPV", "ERI", "ETH", "GAB", "GHA", "GIN", "GMB", "GNB", "GNQ", "KEN", "LBR", "LSO", "MDG", "MLI", "MOZ", "MRT", "MUS", "MWI", "NAM", "NER", "NGA", "RWA", "SDN", "SEN", "SLE", "SOM", "SSD", "STP", "SWZ", "SYC", "TCD", "TGO", "TZA", "UGA", "ZAF", "ZMB", "ZWE")
region_list <<- c("East_Asia_Pacific", "Europe_Central_Asia", "Latin_America_Caribbean", "Middle_East_North_Africa", "North_America", "South_Asia", "sub_Saharan_Africa")
oxcgrtdata$region <- NA
for(reg in region_list){
regional <- get(reg)
oxcgrtdata <- oxcgrtdata %>% mutate(region = ifelse(CountryCode %in% regional, reg, region))
}
write.csv(oxcgrtdata, file = paste("../data/output/OxCGRT_", data_date, ".csv", sep = ""))
#Stata diff: Not pulling JHU data -> confirm w/ Toby
##   Bringing in Apple and Google Mobility Data
url_gmobility <- "https://www.gstatic.com/covid19/mobility/Global_Mobility_Report.csv"
google.mobility <- read_csv(url(url_gmobility))
# Stata diff: Date already stored as date - no need to change
#changing country codes from iso2c to iso3c
crc <- google.mobility %>% pull(country_region_code)
google.mobility$newcountry_code <- NA
google.mobility$newcountry_code <- unlist(countrycode(crc, origin = "iso2c", destination = "iso3c"))
google.mobility <- google.mobility %>%
subset(select = -country_region_code) %>%
rename(country_region_code = newcountry_code)
#google.mobility.play <- google.mobility
#Stata diff: countrycode = "ISO3C" etc find out significance/necessity
#renaming google mob variables
google.mobility <- google.mobility %>% rename(goog_retail = starts_with("retail"),
goog_groceryandpharmacy = starts_with("groceryandpharmacy"),
goog_parks = starts_with("parks"),
goog_transitstations = starts_with("transit"),
goog_workplaces = starts_with("workplaces"),
goog_residential = starts_with("residential"))
google.mobility <- google.mobility %>% filter(is.na(sub_region_1))
write.csv(google.mobility, file = paste("../data/input/googlemobility_", data_date, ".csv", sep = ""))
# Import Apple Mobility Data
apple.mobility.url <- "https://raw.githubusercontent.com/ActiveConclusion/COVID19_mobility/master/apple_reports/applemobilitytrends.csv"
apple.mobility <- read.csv(url(apple.mobility.url))
apple.mobility <- apple.mobility %>% filter(!(geo_type == "city" |
geo_type == "county" |
geo_type == "sub-region"))
country.name.apple <- pull(apple.mobility, var = region)
apple.mobility$countrycode <- NA
apple.mobility$countrycode <- unlist(countrycode(country.name.apple, origin = "country.name", destination = "iso3c"))
#all countries have iso3c codes, no need to drop
apple.mobility <- apple.mobility %>%
subset(select = -c(geo_type, region,
alternative_name, sub.region, country))
apple.mobility <- apple.mobility %>% pivot_longer(-c(transportation_type, countrycode), names_to = "date", values_to = "apple_") %>%
separate(date, c("sep", "date"),sep = "X") %>%
subset(select = -sep) %>%
pivot_wider(names_from = transportation_type, values_from =  apple_) %>%
mutate(date = ymd(date)) %>%
rename(apple_driving = driving, apple_walking = walking, apple_transit = transit)
#is there a more efficient way to do this without two pivots?
write.csv(apple.mobility, file = paste("../data/input/applemobility_", data_date, ".csv", sep = ""))
#merge with apple and google mobility data
###############
### Use these as back-ups for debugging/testing
###############
#google.mobility <- read.csv(file = paste("./data/input/googlemobility_", data_date, ".csv", sep = ""), stringsAsFactors = FALSE)
#oxcgrtdata <- read.csv(file = paste("OxCGRT_", data_date, ".csv", sep = ""), stringsAsFactors = FALSE)
#apple.mobility <- read.csv(file = paste("./data/input/applemobility_", data_date, ".csv", sep = ""), stringsAsFactors = F)
oxcgrtdata <- left_join(oxcgrtdata, google.mobility %>% select(starts_with("goog_"), country_region_code, date),
by = c("CountryCode" = "country_region_code", "Date" = "date"))
oxcgrtdata <- left_join(oxcgrtdata, apple.mobility, by = c("CountryCode" = "countrycode", "Date" = "date"))
oxcgrtdata <- oxcgrtdata %>% mutate_at(vars(starts_with("goog")), ~(.+100))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>%
group_by(CountryCode) %>%
mutate(week_apple_transit = rollmean(apple_transit, k=7, fill = NA))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>%
group_by(CountryCode) %>%
mutate(week_apple_driving = rollmean(apple_driving, k=7, fill = NA))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>%
group_by(CountryCode) %>%
mutate(week_apple_walking = rollmean(apple_walking, k=7, fill = NA))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>%
group_by(CountryCode) %>%
mutate(week_goog_retail = rollmean(goog_retail, k=7, fill = NA))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>%
group_by(CountryCode) %>%
mutate(week_goog_parks = rollmean(goog_parks, k=7, fill = NA))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>%
group_by(CountryCode) %>%
mutate(week_goog_transitstations = rollmean(goog_transitstations, k=7, fill = NA))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>%
group_by(CountryCode) %>%
mutate(week_goog_workplaces = rollmean(goog_workplaces, k=7, fill = NA))
oxcgrtdata <- oxcgrtdata %>% arrange(CountryCode, Date) %>%
group_by(CountryCode) %>%
mutate(week_goog_residential = rollmean(goog_residential, k=7, fill = NA))
#Code optimisation Note #2 -  Is there a better way to do this using mutate_at?
oxcgrtdata <- oxcgrtdata %>% ungroup() %>%
mutate(apple_ave = rowMeans(oxcgrtdata[,c("week_apple_transit", "week_apple_driving", "week_apple_walking")]),
google_ave = rowMeans(oxcgrtdata[,c("week_goog_retail", "week_goog_transitstations", "week_goog_workplaces")]))
oxcgrtdata <- oxcgrtdata %>% ungroup() %>% mutate(mobility_ave = rowMeans(oxcgrtdata[,c("apple_ave", "google_ave")], na.rm = T))
write.csv(oxcgrtdata, file = paste("../data/output/OxCGRT_", data_date, ".csv", sep = ""))
#Bringing in OWID Testing Data
owid_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/testing/covid-testing-all-observations.csv"
owid.data <- read.csv(url(owid_url), stringsAsFactors = FALSE)
owid.data <- owid.data %>% rename(test_total = Cumulative.total,
test_dailychange = Daily.change.in.cumulative.total,
test_totalperthou = Cumulative.total.per.thousand,
test_dailychangeperthou = Daily.change.in.cumulative.total.per.thousand,
test_dailychange_7day = X7.day.smoothed.daily.change,
test_changeperthou_7day = X7.day.smoothed.daily.change.per.thousand,
countrycode = ISO.code) %>%
subset(select = -c(Source.URL, Notes))
owid.data <- owid.data %>% arrange(countrycode, Date, desc(test_total))
owid.data <- owid.data[!duplicated(owid.data[,c("Date", "countrycode")]), ]
owid.data <- owid.data %>% mutate(Date = as.Date(Date))
write.csv(owid.data, file = paste("../data/input/testing_", data_date, ".csv", sep = ""))
oxcgrtdata <- left_join(oxcgrtdata, owid.data %>% select(countrycode, Date, test_total, test_totalperthou),
by = c("Date", "CountryCode"="countrycode"))
oxcgrtdata <- oxcgrtdata %>% mutate(test_percase = test_total/ConfirmedCases)
### new output file with testing data appended
write.csv(oxcgrtdata, file = paste("../data/output/OxCGRT_", data_date, ".csv", sep = ""))
########### using additional data to qualify gaps in testing data
testing_data2_url <- "https://drive.google.com/uc?id=13yev97Ua-E-EslhDIX9vQiC2OZIqgGX4&export=download"
testing.data2 <- read.csv(url(testing_data2_url), stringsAsFactors = FALSE)
testing.data2 <- testing.data2 %>% mutate(test_nodata = ifelse(observations_found == 0, 1, NA))
no.testing.data <- testing.data2 %>% filter(test_nodata == 1)
no.testing.data.ccode <- countrycode(no.testing.data$country, origin = "country.name", destination = "iso3c")
no.testing.data <- no.testing.data %>% mutate(countrycode = no.testing.data.ccode)
#note Micronesia isn't matched
oxcgrtdata <- left_join(oxcgrtdata, no.testing.data %>% select(countrycode, test_nodata), by = c("CountryCode" = "countrycode"))
write.csv(oxcgrtdata, file = paste("../data/output/OxCGRT_", data_date, ".csv", sep = ""))
oxcgrtdata %>% filter(CountryCode == "RUS")
View(oxcgrtdata %>% filter(CountryCode == "RUS"))
library(readr)
library(haven)
library(tidyverse)
library(lubridate)
library(countrycode)
library(zoo)
#pwd <<- "C:\Users\sapta\OneDrive\Desktop\oxcgrtRA\BSGtracker_analysis\codes"
data_date <<- today()
url_oxcgrt <<- "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest_withnotes.csv"
#setwd(pwd)
oxcgrtdata <- read_csv(url(url_oxcgrt))
#notes - save backup at this point
View(oxcgrtdata %>% filter(CountryCode == "RUS"))
correlates <- c("popWB",  "hosp_beds_WB", "total_sars", "sars_deaths",
"total_mers", "h1n1_death_estimate_25pctile",
"h1n1_death_estimate_75pctile", "pop_in_cities")
crossnationaldata <- read_dta("../data/input/crossnationaldata.dta") #note - new version stata file
correlatesdata <- crossnationaldata %>% select(countrycode, popWB, hosp_beds_WB,
total_sars, sars_deaths, total_mers,
h1n1_death_estimate_25pctile,
h1n1_death_estimate_75pctile, pop_in_cities)
oxcgrtdata <- left_join(oxcgrtdata, correlatesdata, by = c("CountryCode" = "countrycode"))
View(oxcgrtdata %>% filter(CountryCode == "RUS"))
View(oxcgrtdata %>% filter(CountryCode == "RUS") %>% select(CountryName, Date))
oxcgrtdata <- oxcgrtdata %>%
drop_na(Date) %>%
mutate(h1n1_midIGR = (h1n1_death_estimate_25pctile + h1n1_death_estimate_75pctile)/2)
#drop notes and M1
oxcgrtdata <- oxcgrtdata %>% select(-starts_with("M1"),-ends_with("Notes"))
#change date variable to date format
oxcgrtdata <- oxcgrtdata %>% mutate(Date = ymd(Date)) %>% subset(Date < data_date)
# attach region labels
East_Asia_Pacific <<- c("ASM", "AUS", "BRN", "CHN", "FJI", "FSM", "GUM", "HKG", "IDN", "JPN", "KHM", "KIR", "KOR", "LAO", "MAC", "MHL", "MMR", "MNG", "MNP", "MYS", "NCL", "NRU", "NZL", "PHL", "PLW", "PNG", "PRK", "PYF", "SGP", "SLB", "THA", "TLS", "TON", "TUV", "TWN", "VNM", "VUT", "WSM")
Europe_Central_Asia <<- c("ALB", "AND", "ARM", "AUT", "AZE", "BEL", "BGR", "BIH", "BLR", "CHE", "CHI", "CYP", "CZE", "DEU", "DNK", "ESP", "EST", "FIN", "FRA", "FRO", "GBR", "GEO", "GIB", "GRC", "GRL", "HRV", "HUN", "IMN", "IRL", "ISL", "ITA", "KAZ", "KGZ", "LIE", "LTU", "LUX", "LVA", "MCO", "MDA", "MKD", "MNE", "NLD", "NOR", "POL", "PRT", "ROU", "RUS", "SMR", "SRB", "SVK", "SVN", "SWE", "TJK", "TKM", "TUR", "UKR", "UZB", "RKS")
Latin_America_Caribbean <<- c("ABW", "ARG", "ATG", "BHS", "BLZ", "BOL", "BRA", "BRB", "CHL", "COL", "CRI", "CUB", "CUW", "CYM", "DMA", "DOM", "ECU", "GRD", "GTM", "GUY", "HND", "HTI", "JAM", "KNA", "LCA", "MAF", "MEX", "NIC", "PAN", "PER", "PRI", "PRY", "SLV", "SUR", "SXM", "TCA", "TTO", "URY", "VCT", "VEN", "VGB", "VIR")
Middle_East_North_Africa <<- c("ARE", "BHR", "DJI", "DZA", "EGY", "IRN", "IRQ", "ISR", "JOR", "KWT", "LBN", "LBY", "MAR", "MLT", "OMN", "PSE", "QAT", "SAU", "SYR", "TUN", "YEM")
North_America <<- c("BMU", "CAN", "USA")
South_Asia <<- c("AFG", "BGD", "BTN", "IND", "LKA", "MDV", "NPL", "PAK")
sub_Saharan_Africa <<- c("AGO", "BDI", "BEN", "BFA", "BWA", "CAF", "CIV", "CMR", "COD", "COG", "COM", "CPV", "ERI", "ETH", "GAB", "GHA", "GIN", "GMB", "GNB", "GNQ", "KEN", "LBR", "LSO", "MDG", "MLI", "MOZ", "MRT", "MUS", "MWI", "NAM", "NER", "NGA", "RWA", "SDN", "SEN", "SLE", "SOM", "SSD", "STP", "SWZ", "SYC", "TCD", "TGO", "TZA", "UGA", "ZAF", "ZMB", "ZWE")
region_list <<- c("East_Asia_Pacific", "Europe_Central_Asia", "Latin_America_Caribbean", "Middle_East_North_Africa", "North_America", "South_Asia", "sub_Saharan_Africa")
oxcgrtdata$region <- NA
for(reg in region_list){
regional <- get(reg)
oxcgrtdata <- oxcgrtdata %>% mutate(region = ifelse(CountryCode %in% regional, reg, region))
}
write.csv(oxcgrtdata, file = paste("../data/output/OxCGRT_", data_date, ".csv", sep = ""))
View(oxcgrtdata %>% filter(CountryCode == "RUS") %>% select(CountryName, Date))
google.mobility <- read.csv(file = paste("./data/input/googlemobility_", data_date, ".csv", sep = ""), stringsAsFactors = FALSE)
#oxcgrtdata <- read.csv(file = paste("OxCGRT_", data_date, ".csv", sep = ""), stringsAsFactors = FALSE)
apple.mobility <- read.csv(file = paste("./data/input/applemobility_", data_date, ".csv", sep = ""), stringsAsFactors = F)
google.mobility <- read.csv(file = paste("../data/input/googlemobility_", data_date, ".csv", sep = ""), stringsAsFactors = FALSE)
#oxcgrtdata <- read.csv(file = paste("OxCGRT_", data_date, ".csv", sep = ""), stringsAsFactors = FALSE)
apple.mobility <- read.csv(file = paste("../data/input/applemobility_", data_date, ".csv", sep = ""), stringsAsFactors = F)
oxcgrtdata <- left_join(oxcgrtdata, google.mobility %>% select(starts_with("goog_"), country_region_code, date),
by = c("CountryCode" = "country_region_code", "Date" = "date"))
google.mobility <- read.csv(file = paste("../data/input/googlemobility_", data_date, ".csv", sep = ""))
#oxcgrtdata <- read.csv(file = paste("OxCGRT_", data_date, ".csv", sep = ""), stringsAsFactors = FALSE)
apple.mobility <- read.csv(file = paste("../data/input/applemobility_", data_date, ".csv", sep = ""))
oxcgrtdata <- left_join(oxcgrtdata, google.mobility %>% select(starts_with("goog_"), country_region_code, date),
by = c("CountryCode" = "country_region_code", "Date" = "date"))
url_gmobility <- "https://www.gstatic.com/covid19/mobility/Global_Mobility_Report.csv"
google.mobility <- read_csv(url(url_gmobility))
# Stata diff: Date already stored as date - no need to change
#changing country codes from iso2c to iso3c
crc <- google.mobility %>% pull(country_region_code)
google.mobility$newcountry_code <- NA
google.mobility$newcountry_code <- unlist(countrycode(crc, origin = "iso2c", destination = "iso3c"))
google.mobility <- google.mobility %>%
subset(select = -country_region_code) %>%
rename(country_region_code = newcountry_code)
#google.mobility.play <- google.mobility
#Stata diff: countrycode = "ISO3C" etc find out significance/necessity
#renaming google mob variables
google.mobility <- google.mobility %>% rename(goog_retail = starts_with("retail"),
goog_groceryandpharmacy = starts_with("groceryandpharmacy"),
goog_parks = starts_with("parks"),
goog_transitstations = starts_with("transit"),
goog_workplaces = starts_with("workplaces"),
goog_residential = starts_with("residential"))
google.mobility <- google.mobility %>% filter(is.na(sub_region_1))
write.csv(google.mobility, file = paste("../data/input/googlemobility_", data_date, ".csv", sep = ""))
oxcgrtdata <- left_join(oxcgrtdata, google.mobility %>% select(starts_with("goog_"), country_region_code, date),
by = c("CountryCode" = "country_region_code", "Date" = "date"))
View(oxcgrtdata %>% filter(CountryCode == "RUS") %>% select(CountryName, Date))
glimpse(google.mobility)
View(google.mobility)
install.packages("igraph")
